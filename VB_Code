'Global Var Definitions
Public Letters(1 To 8, 1 To 4) As String
Public Diagram(1 To 8, 1 To 4) As String
Public Special(1 To 8, 1 To 4) As String
Public Dictionary_Words(1 To 180580) As String
Public Adj_List(1 To 8, 1 To 4) As String

Public Output_Test(1 To 8, 1 To 4) As String
Public Output_Words(1 To 180580) As String

Public outputPath_List(1 To 180580) As String
Public outputWord_List(1 To 180580) As String
Public output_index As Integer


Sub Rectangle1_Click()
'main steps to split up into parts for easier adaptation to environment/customization:
    '1. user input read and association of properties
        Call inputs
       
    '2. dictionary read
        Call dictionary_read
    
    '3. prepro of dictionary if any
        
    '4. subroutine to create list of possible moves
        
        
      Call loop_through_board
    
    '5. assignment of weights to possible moves list
    '6. eventually an iterative step to look multiple moves out and clear gems/count down to end of game.
    '7. results display
        Call Output
         
End Sub
Sub loop_through_board()
Dim row_it As Integer
Dim col_it As Integer
Dim path As String
Dim tile As String

output_index = 0

For row_it = 1 To 4
    For col_it = 1 To 4
    output_index = output_index + 1
        tile = CStr(col_it) + CStr(row_it)
        path = boardPath_Recursive(tile)
    Next col_it
Next row_it


 
 
        

End Sub


Function path_to_word(inputString As String) As String

Dim word As String
Dim path_length As Integer
Dim entries As Integer
Dim i As Integer
Dim rownum As Integer
Dim colnum As Integer


path_length = Len(inputString)

'determine length, that /2 is num of board entries
entries = path_length / 2

'initialize word to blank
word = ""


For i = 1 To entries
'loop for each entry, get two "digit" substring of the path string
    'so first entry is the first two digits of the string
    'conversion formula is col is first digit, row is second
        colnum = CInt(Mid(inputString, 2 * i - 1, 1))
        rownum = CInt(Mid(inputString, 2 * i, 1))
    'then retrieve the board position's letters
    'concatenate to word
    'return word
        word = word + Letters(rownum, colnum)
Next i
path_to_word = word

End Function
Function boardPath_Recursive(boardPath As String) As String
Dim word As String
Dim row_iterator As Integer
Dim col_iterator As Integer
row_iterator = 0
col_iterator = 0
Dim all_adjacent_used As Boolean
all_adjacent_used = True
Dim active_tile As String
Dim active_tile_row As Integer
Dim active_tile_col As Integer
Dim exit_condition_met As Boolean
Dim new_tile As String
Dim new_tile_or As String
Dim word_for_lookup As String
Dim dictionary_result As String
Dim dummy_var_1 As String
Dim dummy_var_2 As String
'input board sequence
'output board sequence

'to simplify life changing from col-row notation to board position notation as:
' 11 21 31 41   actually coded in letters as rows from 2 to 5
' 12 22 32 42
' 13 23 33 43
' 14 24 34 44
'either or issue?
'hidden second board that is empty coded with +4 to the row.
'or board
'15 25 35 45
'16 26 36 46
'17 27 37 47
'18 28 38 48

'conversion formula is concatenation of col num and row num



'get word from board path using function path_to_word and check for it in the dictionary
word_for_lookup = path_to_word(boardPath)

active_tile = Right(boardPath, 2)
active_tile_col = CInt(Left(active_tile, 1))
active_tile_row = CInt(Right(active_tile, 1))

    
'undo either or displacement logic for row iteration purposes
If active_tile_row > 4 Then
    active_tile_row = active_tile_row - 4
End If

'exit condition initialized to false
exit_condition_met = False


'if word is in dictionary
dictionary_result = dictionary_lookup(word_for_lookup)
    If (dictionary_result = "Word Exists") Then
        output_index = output_index + 1
    'write word to possible outputs list
        outputWord_List(output_index) = word_for_lookup
    'write path to possible paths list
        outputPath_List(output_index) = boardPath
    End If
    



'exit if used board
If Len(i) = 32 Then
    exit_condition_met = True
ElseIf dictionary_result = "None Exist" Then
    exit_condition_met = True
Else
    For row_iterator = active_tile_row - 1 To active_tile_row + 1
        For col_iterator = active_tile_col - 1 To active_tile_col + 1
            'if not the same tile and not used
            If (row_iterator > 0 And row_iterator < 5) And (col_iterator > 0 And col_iterator < 5) Then
            If ((row_iterator <> active_tile_row) Or (col_iterator <> active_tile_col)) And (Diagram(active_tile_row, active_tile_col) <> "Ends With") Then
                
                
                If (Diagram(row_iterator, col_iterator) <> "Begins With") Then
                    new_tile = CStr(col_iterator) + CStr(row_iterator)
                    If (checkUsed(boardPath + new_tile) = False) Then
                    all_adjacent_used = False
                    End If
                End If
            
            End If
            End If
        Next col_iterator
    Next row_iterator
    
    If all_adjacent_used Then
        exit_condition_met = True
        boardPath_Recursive = boardPath
    End If
    
    
End If



If (exit_condition_met = False) Then
    'find adjacent board entry to last board path position
    'look to adjacent entries
    'call recursive board path with adjacent paths
    For row_iterator = active_tile_row - 1 To active_tile_row + 1
        For col_iterator = active_tile_col - 1 To active_tile_col + 1
            'if not the same tile and not used
            If (row_iterator > 0 And row_iterator < 5) And (col_iterator > 0 And col_iterator < 5) Then
            If (row_iterator <> active_tile_row Or col_iterator <> active_tile_col) And (Diagram(active_tile_row, active_tile_col) <> "Ends With") Then
                If (Diagram(row_iterator, col_iterator) <> "Begins With") Then
                'unique new tile unused and not a begins with
                'append to boardPath after converting to position
                new_tile = CStr(col_iterator) + CStr(row_iterator)
                'mark new tile already used?
                
                If (checkUsed(boardPath + new_tile) = False) Then
                'logic for either or
                If Diagram(row_iterator, col_iterator) = "Either Or" Then
                
                new_tile_or = CStr(col_iterator) + CStr(row_iterator + 4)
                dummyvar2 = boardPath_Recursive(boardPath + new_tile) + boardPath_Recursive(boardPath + new_tile_or)
                Else
                
                dummyvar1 = boardPath_Recursive(boardPath + new_tile)
                End If
                End If

                
                End If
            End If
            End If
        Next col_iterator
     Next row_iterator
End If
boardPath_Recursive = boardPath
End Function

Function checkUsed(boardPath As String) As Boolean
'check if the newest tile in board path is already used.
Dim i As Integer
Dim j As Integer
Dim path_length As Integer
Dim entries As Integer
Dim last_tile As String
last_tile = Right(boardPath, 2)
path_length = Len(boardPath)
entries = path_length / 2

'initialize value to false
checkUsed = False

'don't bother for less than 2 tiles
If path_length > 2 Then
'check up to one before last tile.
    For i = 1 To entries - 1
        'compare each entry's board index to last tile's index
        If (Mid(boardPath, 2 * i - 1, 2) = last_tile) Then
            checkUsed = True
        End If
    Next i
End If

End Function
Function parse_cell(instring As String) As String
    If (Left(instring, 1)) = "-" Then
        parse_cell = "Ends With"
    ElseIf (Right(instring, 1)) = "-" Then
        parse_cell = "Begins With"
    ElseIf (Mid(instring, 2, 1) = "/") Then
        parse_cell = "Either Or"
    Else
        parse_cell = "None"
    End If
        
End Function
Function dictionary_lookup(lookup_word As String) As String
'given a string input cycle through dictonary words looking for a word starting with the same sequence
Dim lookup_len As Integer
lookup_len = Len(lookup_word)
'return a true or false for if a word is present in the dictionary or not found for now
Dim i As Long

dictionary_lookup = "None Exist"
Dim checked_dictionary As Boolean
checked_dictionary = False

For i = 1 To 180580
    If Left(Dictionary_Words(i), 1) = Left(lookup_word, 1) Then
        'entered correct part of dictionary
        checked_dictionary = True
    
    If Left(Dictionary_Words(i), lookup_len) = lookup_word Then
        dictionary_lookup = "Get More Letters"
        If Len(Dictionary_Words(i)) = lookup_len Then
            dictionary_lookup = "Word Exists"
             i = 180580 ' in other words, stop looking and just add the substr.
        End If
    End If
    
    End If
    
    
    'optional optimization
    If (i < 180580) Then
    If (Left(Dictionary_Words(i + 1), 1) <> Left(lookup_word, 1)) Then
    'break loop if checked the dictionary and exiting the relevant section
    If checked_dictionary = True Then
    i = 180580
    End If
    End If
    End If
    
Next i
            
End Function

Sub dictionary_read()
'set word range to first column of words given by the words used in scrabble plus all the words in english language 9 letters to 16.
Dim Dictionary As Worksheet
  Set Dictionary = ActiveWorkbook.Sheets("Sheet2")
  Dim dict As Range
  Set dict = Dictionary.Range("A2:A180580")
'we can go two paths here, create an array of possible substrings and pass that, which i think is kind of a bad idea, i think it
'it would be wiser to re-parse the substring as needed
' i do however think it is smart to at this point create the necessary size dictionary to memory, maybe? that or start the algorithm here.
' if i recall correctly passing from cell value to memory is expensive, but once an object is created in memory in VBA it is easier accessed.

For Each cell In dict
  Dictionary_Words(cell.row - 1) = cell.Value
Next cell
  

End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Application.ScreenUpdating = False
    ' Clear the color of all the cells
    Cells.Interior.ColorIndex = 0
    ' Highlight the active cell
    Target.Interior.ColorIndex = 8
    Application.ScreenUpdating = True
End Sub
Sub Output()
'writing to workbook
'currently testing just getting the input and re-writing
    Dim Output As Range
    Set Output = Range("e2:e2000")
    For Each cell In Output
        cell.Value = outputWord_List(cell.row - 1)
    Next cell
    Set Output = Range("f2:f2000")
    For Each cell In Output
        cell.Value = outputPath_List(cell.row - 1)
    Next cell
    

End Sub

Sub inputs()
' when will VBA EVER have block comments??
'user input read
'RM1 assumes workbook entry is formatted as a grid so position is inherent to cell and user is confined to area in worksheet.
'FW1 parse string in each cell will be required to discover properties. Initally no diagram restriction properties allowed. add later and test
'FW2 all letters will assumed to not be special to start with to avoid weighting problem until after other issues are debugged.
'RM2 general approach:
    '1 define variables: input range, (public) (static?) 3 2-dimensional arrays to hold for each board position the 3 major properties therein: letters present, diagram restriction, special bonus.
    '2 cycle through range, assign to each array the letter, and properties.
  Dim userInput As Range
 Set userInput = Range("A2:D5")

    For Each cell In userInput
        Letters(cell.row - 1, cell.Column) = cell.Value
        'FW1 add parse string to find special diagram notes
        Diagram(cell.row - 1, cell.Column) = parse_cell(cell.Value)
        If (Diagram(cell.row - 1, cell.Column) = "Begins With") Then
            Letters(cell.row - 1, cell.Column) = Left(cell.Value, Len(cell.Value) - 1)
            'cell.Value = Letters(cell.row, cell.Column)
        End If
        If (Diagram(cell.row - 1, cell.Column) = "Ends With") Then
            Letters(cell.row - 1, cell.Column) = Right(cell.Value, Len(cell.Value) - 1)
             'cell.Value = Letters(cell.row, cell.Column)
        End If
        If (Diagram(cell.row - 1, cell.Column) = "Either Or") Then
            Letters(cell.row - 1, cell.Column) = Left(cell.Value, 1)
            Letters(cell.row - 1 + 4, cell.Column) = Right(cell.Value, 1)
            Diagram(cell.row - 1 + 4, cell.Column) = "Either Or"
            Special(cell.row - 1 + 4, cell.Column) = 1
             'cell.Value = Letters(cell.row, cell.Column)
        End If
            
        
        'FW2 add find highlighting code to get properties
        Special(cell.row - 1, cell.Column) = 1
    Next cell

End Sub




